use std::env;
use std::cmp;

fn p1() {
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.

    let mut sum = 0;
    for i in 0..1000 {
        if i % 5 == 0 || i % 3 == 0 {
            sum += i
        } 
    }
    println!("A1: {}", sum);
}

fn p2() {
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    
    let mut prev_prev = 1;
    let mut prev = 2;
    let mut sum = 2;
    while prev < 4000000 {
        let tmp = prev;
        prev = prev_prev + prev;
        prev_prev = tmp;
        if prev % 2 == 0 {
            sum += prev
        }
    }
    println!("A2: {}", sum);

}

fn get_primes_up_to(n : usize) -> Vec<bool>  {
    // this guesses the the initial number wasn't prime
    // the sieve of eratosthenes
    let n = n as f32;
    let n_primes_guess = n.sqrt().ceil() as usize;
    let mut primes = vec![true; n_primes_guess];
    primes[0] = false;
    primes[1] = false;
    for i in 0..n_primes_guess {
        if i * i > n_primes_guess {
            break;
        }
        if primes[i] {
            // rust doesnt have the regular for loop and i dont
            // know how to increment by a number other than 1 nicely
            // i want: for(j = i*i; j < n_primes_guess; j += i)
            let mut j = i*i;
            while j < n_primes_guess {
                primes[j] = false;
                j = j + i;
            }
        }
    }
    return primes;
}

fn get_primes_up_to2(n : usize) -> Vec<bool>  {
    // the sieve of eratosthenes
    let n = n as f32;
    let n_primes_guess = n as usize;
    let mut primes = vec![true; n_primes_guess];
    primes[0] = false;
    primes[1] = false;
    for i in 0..n_primes_guess {
        if i * i > n_primes_guess {
            break;
        }
        if primes[i] {
            // rust doesnt have the regular for loop and i dont
            // know how to increment by a number other than 1 nicely
            // i want: for(j = i*i; j < n_primes_guess; j += i)
            let mut j = i*i;
            while j < n_primes_guess {
                primes[j] = false;
                j = j + i;
            }
        }
    }
    return primes;
}

fn p3() {
    // The prime factors of 13195 are 5, 7, 13 and 29.
    // What is the largest prime factor of the number 600851475143 ?

    //let big_num = 13195 as usize;
    let big_num = 600851475143 as usize;
    //println!("primes: ");
    let primes = get_primes_up_to(big_num);
    //for (i,p) in primes.iter().enumerate() {
    //    println!("{}:{}", i, p) 
    //}
    let mut winner = 0;
    for (i,p) in primes.iter().enumerate() {
        if *p && big_num % i == 0 {
            winner = i
        }
    }
    println!("A3: {}", winner);
}

fn is_palindromic(n: usize) -> bool {
    let s = n.to_string().into_bytes();
    let n_digits = s.len();
    for i in 0..n_digits/2 {
        let left = s[i];
        let right = s[n_digits-i-1];
        if left != right {
            return false;
        }
    }
    return true;
}

fn find_largest_palindrom_prod_of_2_less_than(n: usize) -> usize {
    let mut winner = 0;
    for i in 0..n {
        for j in 0..n {
            if i * j > winner {
                if is_palindromic(i*j) {
                    winner = i * j;
                }
            }
        }
    }
    return winner;
}

fn p4() {
    // A palindromic number reads the same both ways. 
    // The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
    // Find the largest palindrome made from the product of two 3-digit numbers.

    //println!("is_palindromic(9009): {}", is_palindromic(9009));
    //println!("is_palindromic(9000): {}", is_palindromic(9000));
    //println!("A4: {}", find_largest_palindrom_prod_of_2_less_than(100));
    println!("A4: {}", find_largest_palindrom_prod_of_2_less_than(1000));
}

fn is_divisible_by_all_up_to(number: usize, top: usize) -> bool {
    for i in 1..top {
        if number % i != 0 {
            return false;
        }
    }
    return true;
}

fn smallest_divisible_by_all(top: usize) -> usize {
    let mut i = top;
    loop {
        if is_divisible_by_all_up_to(i, top) {
            return i;
        }
        i += 1;
    }
}
fn p5() {
    // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    
    println!("A5: {}", smallest_divisible_by_all(20));
}

fn p6() {
    //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    let mut sum_of_squares = 0;
    let mut sum = 0;
    for i in 1..101 {
        sum_of_squares += i*i;
        sum += i;
    }

    println!("A6: {}", sum*sum - sum_of_squares);
}

fn is_prime(n: usize) -> bool {
    let f = n as f64;
    let max = f.sqrt().ceil() as usize;
    for i in 2..max+1 {
        if n % i == 0 {
            return false;
        }
    }
    return true;
}

fn p7() {
    // By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    // What is the 10 001st prime number?
    
    let mut i = 2;
    let mut n_primes = 1;
    let mut prime = 2;
    let mut found = false;
    while !found {
        if is_prime(i) {
            if n_primes == 10001 - 1 {
                prime = i;
                found = true;
            }
            n_primes += 1;
        }
        i += 1;
    }
    
    println!("A7: {}", prime);
}

fn get_prod_starting_at(start: usize, num_digits: usize, number: &Vec<u32>) -> usize {
    let mut sum = 1 as usize;
    if start + num_digits >= number.len() {
        return 0;
    }
    for i in start..start+num_digits {
        sum *= number[i] as usize;
    }
    return sum;
}

fn find_greatest_streak(num_digits: usize, number: &Vec<u32>) -> usize {
    let mut winner = 0;
    for i in 0..number.len() {
        let tmp = get_prod_starting_at(i, num_digits, number);
        if tmp > winner {
            winner = tmp;
        }
    }
    return winner;
}

fn p8() {
    // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

    // 73167176531330624919225119674426574742355349194934
    // 96983520312774506326239578318016984801869478851843
    // 85861560789112949495459501737958331952853208805511
    // 12540698747158523863050715693290963295227443043557
    // 66896648950445244523161731856403098711121722383113
    // 62229893423380308135336276614282806444486645238749
    // 30358907296290491560440772390713810515859307960866
    // 70172427121883998797908792274921901699720888093776
    // 65727333001053367881220235421809751254540594752243
    // 52584907711670556013604839586446706324415722155397
    // 53697817977846174064955149290862569321978468622482
    // 83972241375657056057490261407972968652414535100474
    // 82166370484403199890008895243450658541227588666881
    // 16427171479924442928230863465674813919123162824586
    // 17866458359124566529476545682848912883142607690042
    // 24219022671055626321111109370544217506941658960408
    // 07198403850962455444362981230987879927244284909188
    // 84580156166097919133875499200524063689912560717606
    // 05886116467109405077541002256983155200055935729725
    // 71636269561882670428252483600823257530420752963450
    // 
    // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    
    let number_str = "
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    ";

    let number = number_str.chars().filter_map(|x| x.to_digit(10)).collect();

    println!("A8: {}", find_greatest_streak(13, &number));
}

fn p9() {
    // A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    //
    // a2 + b2 = c2
    // For example, 32 + 42 = 9 + 16 = 25 = 52.
    //
    // There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    // Find the product abc.

    for a in 1..1000 {
        for b in 1..1000 {
            let sum_lhs = (a*a + b*b) as f64;
            let c = sum_lhs.sqrt();
            if c == c.floor() {
                let c = c as usize;
                if a + b + c == 1000 {
                    println!("A9: {}", a * b * c);
                    return;
                }
            }
        }
    }

}

fn p10() {
    // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    // Find the sum of all the primes below two million.

    let lim = 2000000;
    //let lim = 10;
    let x = get_primes_up_to2(lim);
    let mut sum = 0;
    for (i, is_prime) in x.iter().enumerate() {
        println!("{}:{}", i, *is_prime);
        if *is_prime {
            sum += i;
        }
    }
    println!("A10: {}", sum);
}

struct SquareMatrix {
    data: Vec<usize>,
    n : usize,
}

impl SquareMatrix {
    fn new(n_ele: usize) -> SquareMatrix {
        let d = vec![0; n_ele*n_ele];
        SquareMatrix{data: d, n: n_ele}
    }
    fn set(&mut self, row: usize, col: usize, val: usize) {
        self.data[row*self.n+col] = val;
    }
    fn at(&self, row: usize, col: usize) -> usize {
        return self.data[row*self.n+col] as usize;
    }
    fn is_start_of_valid_horz_4(&self, row: usize, col: usize) -> bool {
        return col + 3 < self.n && row < self.n;
    }
    fn is_start_of_valid_vert_4(&self, row: usize, col: usize) -> bool {
        return row + 3 < self.n && col < self.n;
    }
    fn is_start_of_valid_right_diag_4(&self, row: usize, col: usize) -> bool {
        return col + 3 < self.n && row + 3 < self.n;
    }
    fn is_start_of_valid_left_diag_4(&self, row: usize, col: usize) -> bool {
        return col >= 3 && col - 3 < self.n && row + 3 < self.n;
    }
    fn get_right_diag_4_prod(&self, row: usize, col: usize) -> usize {
        let mut tot : usize = 1;
        for i in 0..4 {
            tot *= self.at(row + i, col + i);
        }
        println!("({}, {}) diag = {}", row, col, tot);
        return tot;
    }
    fn get_left_diag_4_prod(&self, row: usize, col: usize) -> usize {
        let mut tot : usize = 1;
        for i in 0..4 {
            tot *= self.at(row + i, col - i);
        }
        println!("({}, {}) diag = {}", row, col, tot);
        return tot;
    }
    fn get_horz_4_prod(&self, row: usize, col: usize) -> usize {
        let mut tot : usize = 1;
        for i in 0..4 {
            tot *= self.at(row, col + i);
        }
        println!("({}, {}) horz = {}", row, col, tot);
        return tot;
    }
    fn get_vert_4_prod(&self, row: usize, col: usize) -> usize {
        let mut tot : usize = 1;
        for i in 0..4 {
            tot *= self.at(row + i, col);
        }
        println!("({}, {}) down = {}", row, col, tot);
        return tot;
    }
    fn print(&self) {
        for i in 0..self.n {
            for j in 0..self.n {
                print!("{} ", self.at(i,j));
            }
            print!("\n");
        }
    }
}

fn p11() {
    // What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    let d = vec!(
08,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91,08,
49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00,
81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65,
52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91,
22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80,
24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50,
32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70,
67,26,20,68,02,62,12,20,95,63,94,39,63,08,40,91,66,49,94,21,
24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72,
21,36,23,09,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95,
78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14,09,53,56,92,
16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57,
86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58,
19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40,
04,52,08,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66,
88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69,
04,42,16,73,38,25,39,11,24,94,72,18,08,46,29,32,40,62,76,36,
20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16,
20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54,
01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48
);
    let m = SquareMatrix {data: d, n: 20};
    let mut winner : usize = 0;
    for i in 0..20 {
        for j in 0..20 {
            if m.is_start_of_valid_vert_4(i,j) {
                let x = m.get_vert_4_prod(i,j);
                winner = cmp::max(x, winner);
            }
            if m.is_start_of_valid_left_diag_4(i,j) {
                let x = m.get_left_diag_4_prod(i,j);
                winner = cmp::max(x, winner);
            }
            if m.is_start_of_valid_right_diag_4(i,j) {
                let x = m.get_right_diag_4_prod(i,j);
                winner = cmp::max(x, winner);
            }
            if m.is_start_of_valid_horz_4(i,j) {
                let x = m.get_horz_4_prod(i,j);
                winner = cmp::max(x, winner);
            }
        }
    }
    println!("A11: {}", winner);
    //println!("{}", m.get_diag_4_prod(6,8));
}

//fn get_smallest_divisor(n: usize) -> usize {
//    if n == 1 { return 1; }
//    if n == 2 { return 2; }
//    for i in 2..n {
//        if n % i == 0 {
//            return i;
//        }
//    }
//    return n;
//}
//
//fn get_divisors(n: usize) -> Vec<usize> {
//    let mut vec = Vec::new();
//    vec.push(1);
//    let mut curr = n;
//    while curr != 1 {
//        let div = get_smallest_divisor(curr);
//        vec.push(div);
//        curr = curr / div;
//    }
//    vec.push(n);
//    vec
//}

//fn get_all_divisors(n: usize) -> Vec<usize> {
//    let mut vec = Vec::new();
//    let n_float = n as f64;
//    vec.push(1);
//    for i in 2..n {
//        let i_float = i as f64;
//        let res = n_float / i_float;
//        if res == res.ceil() {
//            vec.push(i);
//        }
//    }
//    vec.push(n);
//    vec
//}

fn get_num_divisors(n: usize) -> usize {
    let n_float = n as f64;
    let mut n_divs = 1;
    for i in 2..n {
        let i_float = i as f64;
        let res = n_float / i_float;
        if res == res.ceil() {
            n_divs += 1;
        }
    }
    n_divs += 1;
    n_divs
}

fn p12() {
    //  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    //  
    //  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    //  
    //  Let us list the factors of the first seven triangle numbers:
    //  
    //       1: 1
    //       3: 1,3
    //       6: 1,2,3,6
    //      10: 1,2,5,10
    //      15: 1,3,5,15
    //      21: 1,3,7,21
    //      28: 1,2,4,7,14,28
    //  
    //  We can see that 28 is the first triangle number to have over five divisors.
    //  
    //  What is the value of the first triangle number to have over five hundred divisors?

    //println!("div(6): ");
    //let divs = get_all_divisors(6);
    //for d in divs.iter() {
    //    println!("{}", d);
    //}
    //println!("div(10): ");
    //let divs = get_all_divisors(10);
    //for d in divs.iter() {
    //    println!("{}", d);
    //}
    //println!("div(28): ");
    //let divs = get_all_divisors(28);
    //for d in divs.iter() {
    //    println!("{}", d);
    //}
    
    //let mut vec = Vec::new();
    let mut tri = 0;
    let mut i = 0;
    let mut n_divs = 0;
    while n_divs <= 500 {
        tri += i;
        n_divs = get_num_divisors(tri);
        println!("tri: {}. n_divs: {}", tri, n_divs);
        i += 1;
    }
    println!("A12: {}", tri);
    //let n_divs = get_num_divisors(10000000000);
    //println!("{}", n_divs);

}

struct BigNum {
    digits: Vec<u32>,
}

impl BigNum {
    fn from(s: &String) -> BigNum {
        let mut rv = BigNum{digits: Vec::new()};
        rv.parse(s);
        rv
    }
    //fn new() -> BigNum {
    //    BigNum{digits: Vec::new()}
    //}
    fn parse(&mut self, s: &String) {
        self.digits.reserve(s.len());
        for i in s.chars() {
            let digit_opt = i.to_digit(10);
            let digit = match digit_opt {
                Some(x) => x, 
                None => panic!("it should have been a digit"),
            };
            self.digits.push(digit);
        }
    }
    fn print10(&self) {
        for i in 0..10 {
            print!("{}", self.digits[i]);
        }
        print!("\n");
    }
    fn print(&self) {
        for d in self.digits.iter() {
            print!("{}", d);
        }
        print!("\n");
    }
    fn add(&self, other: &BigNum) -> BigNum {
        // the two numbers are like:
        // 01234567
        // 0123
        //
        // so we need to start from len() - 1 of each and move down (left)
        // until we reach 0 and then padd with zeros
        //
        // effectively giving in our example:
        // 01234567
        // 00000123
        //
        // rust will not let a usize got negative so you cant increment
        // a size counter to -1.  so we need a special flag that says
        // "okay we really should be -1 so starting padding with zeroes"
        let max_digits = cmp::max(self.digits.len(), other.digits.len());
        let mut new_digits = Vec::new();
        new_digits.reserve(max_digits+1);
        let mut carry = 0;
        let mut o_idx = other.digits.len() - 1;
        let mut s_idx = self.digits.len() - 1;
        let mut s_done = false;
        let mut o_done = false;
        while !(s_done && o_done) {
            let a = if o_done { 0 } else { other.digits[o_idx] };
            let b = if s_done { 0 } else { self.digits[s_idx] };
            let tmp = a + b + carry;
            carry = if tmp >= 10 { 1 } else { 0 };
            new_digits.push(tmp % 10);

            // index updates
            if o_idx == 0 {
                o_done = true;
            }
            if s_idx == 0 {
                s_done = true;
            }
            if !o_done {
                o_idx -= 1;
            }
            if !s_done {
                s_idx -= 1;
            }
        }
        if carry == 1 {
            new_digits.push(1);
        }
        new_digits.reverse();
        BigNum{digits: new_digits}
    }
    fn to_usize(&self) -> usize {
        let mut tot = 0;
        for (i, v) in self.digits.iter().rev().enumerate() {
            //println!("{} {}", i, v);
            let ten = 10 as usize;
            tot += *v as usize * ten.pow(i as u32);
        }
        tot
    }
    fn mul(&self, other: &BigNum) -> BigNum {
        //println!("{} x {}", self.to_usize(), other.to_usize());
        let mut rv = BigNum::from(&String::from("0"));
        for _ in 0..other.to_usize() {
            //rv.print();
            rv = rv.add(self);
        }
        rv
    }
    fn pow(&self, exp: &BigNum) -> BigNum {
        println!("pow: {} to the {}", self.to_usize(), exp.to_usize());
        let mut rv = BigNum::from(&String::from("1"));
        let n = exp.to_usize();
        for _ in 0..n {
            rv = rv.mul(&self);
        }
        rv
    }
    fn sum_digits(&self) -> usize {
        let mut tot = 0;
        for v in self.digits.iter() {
            tot += *v as usize;
        }
        tot
    }
}

fn p13() {
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    let numbers = vec!(
     "37107287533902102798797998220837590246510135740250",
     "46376937677490009712648124896970078050417018260538",
     "74324986199524741059474233309513058123726617309629",
     "91942213363574161572522430563301811072406154908250",
     "23067588207539346171171980310421047513778063246676",
     "89261670696623633820136378418383684178734361726757",
     "28112879812849979408065481931592621691275889832738",
     "44274228917432520321923589422876796487670272189318",
     "47451445736001306439091167216856844588711603153276",
     "70386486105843025439939619828917593665686757934951",
     "62176457141856560629502157223196586755079324193331",
     "64906352462741904929101432445813822663347944758178",
     "92575867718337217661963751590579239728245598838407",
     "58203565325359399008402633568948830189458628227828",
     "80181199384826282014278194139940567587151170094390",
     "35398664372827112653829987240784473053190104293586",
     "86515506006295864861532075273371959191420517255829",
     "71693888707715466499115593487603532921714970056938",
     "54370070576826684624621495650076471787294438377604",
     "53282654108756828443191190634694037855217779295145",
     "36123272525000296071075082563815656710885258350721",
     "45876576172410976447339110607218265236877223636045",
     "17423706905851860660448207621209813287860733969412",
     "81142660418086830619328460811191061556940512689692",
     "51934325451728388641918047049293215058642563049483",
     "62467221648435076201727918039944693004732956340691",
     "15732444386908125794514089057706229429197107928209",
     "55037687525678773091862540744969844508330393682126",
     "18336384825330154686196124348767681297534375946515",
     "80386287592878490201521685554828717201219257766954",
     "78182833757993103614740356856449095527097864797581",
     "16726320100436897842553539920931837441497806860984",
     "48403098129077791799088218795327364475675590848030",
     "87086987551392711854517078544161852424320693150332",
     "59959406895756536782107074926966537676326235447210",
     "69793950679652694742597709739166693763042633987085",
     "41052684708299085211399427365734116182760315001271",
     "65378607361501080857009149939512557028198746004375",
     "35829035317434717326932123578154982629742552737307",
     "94953759765105305946966067683156574377167401875275",
     "88902802571733229619176668713819931811048770190271",
     "25267680276078003013678680992525463401061632866526",
     "36270218540497705585629946580636237993140746255962",
     "24074486908231174977792365466257246923322810917141",
     "91430288197103288597806669760892938638285025333403",
     "34413065578016127815921815005561868836468420090470",
     "23053081172816430487623791969842487255036638784583",
     "11487696932154902810424020138335124462181441773470",
     "63783299490636259666498587618221225225512486764533",
     "67720186971698544312419572409913959008952310058822",
     "95548255300263520781532296796249481641953868218774",
     "76085327132285723110424803456124867697064507995236",
     "37774242535411291684276865538926205024910326572967",
     "23701913275725675285653248258265463092207058596522",
     "29798860272258331913126375147341994889534765745501",
     "18495701454879288984856827726077713721403798879715",
     "38298203783031473527721580348144513491373226651381",
     "34829543829199918180278916522431027392251122869539",
     "40957953066405232632538044100059654939159879593635",
     "29746152185502371307642255121183693803580388584903",
     "41698116222072977186158236678424689157993532961922",
     "62467957194401269043877107275048102390895523597457",
     "23189706772547915061505504953922979530901129967519",
     "86188088225875314529584099251203829009407770775672",
     "11306739708304724483816533873502340845647058077308",
     "82959174767140363198008187129011875491310547126581",
     "97623331044818386269515456334926366572897563400500",
     "42846280183517070527831839425882145521227251250327",
     "55121603546981200581762165212827652751691296897789",
     "32238195734329339946437501907836945765883352399886",
     "75506164965184775180738168837861091527357929701337",
     "62177842752192623401942399639168044983993173312731",
     "32924185707147349566916674687634660915035914677504",
     "99518671430235219628894890102423325116913619626622",
     "73267460800591547471830798392868535206946944540724",
     "76841822524674417161514036427982273348055556214818",
     "97142617910342598647204516893989422179826088076852",
     "87783646182799346313767754307809363333018982642090",
     "10848802521674670883215120185883543223812876952786",
     "71329612474782464538636993009049310363619763878039",
     "62184073572399794223406235393808339651327408011116",
     "66627891981488087797941876876144230030984490851411",
     "60661826293682836764744779239180335110989069790714",
     "85786944089552990653640447425576083659976645795096",
     "66024396409905389607120198219976047599490197230297",
     "64913982680032973156037120041377903785566085089252",
     "16730939319872750275468906903707539413042652315011",
     "94809377245048795150954100921645863754710598436791",
     "78639167021187492431995700641917969777599028300699",
     "15368713711936614952811305876380278410754449733078",
     "40789923115535562561142322423255033685442488917353",
     "44889911501440648020369068063960672322193204149535",
     "41503128880339536053299340368006977710650566631954",
     "81234880673210146739058568557934581403627822703280",
     "82616570773948327592232845941706525094512325230608",
     "22918802058777319719839450180888072429661980811197",
     "77158542502016545090413245809786882778948721859617",
     "72107838435069186155435662884062257473692284509516",
     "20849603980134001723930671666823555245252804609722",
     "53503534226472524250874054075591789781264330331690",
     );
    let mut big_nums = Vec::new();
    for n in numbers {
        //let mut bn = BigNum{digits : Vec::new()};
        let bn = BigNum::from(&String::from(n));
        //bn.print();
        big_nums.push(bn);
    }

    let mut accum = BigNum::from(&String::from("0"));
    for bn in big_nums {
        accum = accum.add(&bn);
        //accum.print();
    }

    print!("A13: ");
    accum.print10();
    print!("\n");

    //let a = BigNum::from(&String::from("13243124"));
    //let b = BigNum::from(&String::from("0"));
    //let b = BigNum::from(&String::from("20849603980134001723930671666823555245252804609722"));
    //a.print();
    //b.print();
    //let c = a.add(&b);
    //c.print();
    
    //let a = BigNum::from(&String::from("10"));
    //let b = BigNum::from(&String::from("99"));
    //a.print();
    //b.print();
    //let c = a.add(&b);
    //c.print();

    //let d = BigNum::from(&String::from("555555"));
    //let e = BigNum::from(&String::from("99"));
    //d.print();
    //e.print();
    //let f = d.add(&e);
    //f.print();
}

fn get_next_collatz(n: usize) -> usize {
    if n % 2 == 0 {
        n/2
    } else {
        3*n + 1
    }
}

//fn get_collatz_seq(start: usize) -> Vec<usize> {
//    let mut seq = Vec::new();
//    let mut next = get_next_collatz(start);
//    while next != 1 {
//        seq.push(next);
//        next = get_next_collatz(next);
//    }
//    seq.push(1);
//    seq
//}

fn count_collatz_seq_len(start: usize) -> usize {
    let mut next = get_next_collatz(start);
    let mut len = 1;
    while next != 1 {
        next = get_next_collatz(next);
        len += 1
    }
    len
}

fn p14() {


    // The following iterative sequence is defined for the set of positive integers:
    // 
    // n → n/2 (n is even)
    // n → 3n + 1 (n is odd)
    // 
    // Using the rule above and starting with 13, we generate the following sequence:
    // 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
    // 
    // It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
    // 
    // Which starting number, under one million, produces the longest chain?
    // 
    // NOTE: Once the chain starts the terms are allowed to go above one million.
    
    //let seq = get_collatz_seq(13);
    //print!("collatz(13): ");
    //for n in seq {
    //    print!("{} ", n);
    //}
    //print!("\n");
    //println!("collatz(13).len: {}", count_collatz_seq_len(13));
    
    let mut winner = 0;
    let mut winner_len = 0;
    for i in 1..1000000 {
        //println!("i: {}", i);
        let len = count_collatz_seq_len(i);
        if len > winner_len {
            winner_len = len;
            winner = i;
        }
    }
    println!("A14: {}", winner);
}



fn calc_num_paths(n: usize) -> usize {
    let n = n + 1;
    let mut grid = SquareMatrix::new(n);
    grid.set(n-1, n-1, 1);
    while grid.at(0,0) == 0 {
        for i in 0..n {
            for j in 0..n {
                let mut down = 0;
                let mut right = 0;
                if i == n-1 && j == n-1 {
                    continue;
                } else if i != n-1 && j == n-1 {
                    down = grid.at(i+1, j);
                } else if i == n-1  && j != n-1 {
                    right = grid.at(i, j+1);
                } else {
                    // i != n-1 && j != n-1
                    right = grid.at(i, j+1);
                    down = grid.at(i+1, j);
                }
                grid.set(i, j, right + down);
            }
        }
    }
    grid.print();
    return grid.at(0,0);
}

fn p15() {

    // Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, 
    // there are exactly 6 routes to the bottom right corner.
    // 
    // How many such routes are there through a 20×20 grid?
    
    println!("{}", calc_num_paths(2));
    println!("A15: {}", calc_num_paths(20));
}

fn p16() {
    // 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    // 
    // What is the sum of the digits of the number 2^1000?
    
    let base = BigNum::from(&String::from("2"));
    //let exp = BigNum::from(&String::from("15"));
    let exp = BigNum::from(&String::from("1000"));
    println!("{}", base.to_usize());
    println!("{}", exp.to_usize());
    let ans = base.pow(&exp);
    //let ans = base.mul(&exp);
    println!("A16: {}", ans.sum_digits());
}
        

fn main() {
    let args: Vec<_> = env::args().collect();
    if args.len() < 2 {
        println!("specify a problem to solve");
        return;
    }
    match args[1].as_ref() {
        "1" => p1(),
        "2" => p2(),
        "3" => p3(),
        "4" => p4(),
        "5" => p5(),
        "6" => p6(),
        "7" => p7(),
        "8" => p8(),
        "9" => p9(),
        "10" => p10(),
        "11" => p11(),
        "12" => p12(),
        "13" => p13(),
        "14" => p14(),
        "15" => p15(),
        "16" => p16(),
        _ => println!("that's not a problem I recognize"),
    }
}
